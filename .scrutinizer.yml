# Using the tool and checks params together is not possible because the checks param
# overrides the tools param. Scritiner support recommends only using the checks option.
#
# However I wish to use an external php code sniffer config, so I need to use the tools param... I think.

filter:
    excluded_paths: [vendor/*, languages/*, includes/libraries/*, assets/*, cache/* ]
before_commands:
    - git clone https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
tools:
    php_pdepend: true
    php_mess_detector:
        config:
            code_size_rules:
                cyclomatic_complexity:  false
                npath_complexity:     false
                excessive_method_length:  false
                excessive_class_length:  false
                excessive_parameter_list:  false
                excessive_public_count:  false
                too_many_fields:      false
                too_many_methods:     false
                excessive_class_complexity:  false
        filter:
            excluded_paths: [vendor/*, languages/*, includes/libraries/*, assets/*, cache/* ]
    php_analyzer:
        filter:
            excluded_paths: [vendor/*, languages/*, includes/libraries/*, assets/*, cache/* ]
        config:
            parameter_reference_check: true
            checkstyle: { enabled: true, no_trailing_whitespace: true, naming: { enabled: false, local_variable: '', abstract_class_name: '', utility_class_name: '', constant_name: '', property_name: '', method_name: '', parameter_name: '', interface_name: '', type_name: '', exception_name: '', isser_method_name: '' } }
            unreachable_code: true
            check_access_control: true
            typo_checks: true
            check_variables: true
            suspicious_code: { enabled: true, overriding_parameter: true, overriding_closure_use: true, parameter_closure_use_conflict: true, parameter_multiple_times: true, non_existent_class_in_instanceof_check: true, non_existent_class_in_catch_clause: true, assignment_of_null_return: true, non_commented_switch_fallthrough: true, non_commented_empty_catch_block: true, overriding_private_members: true, use_statement_alias_conflict: true, precedence_in_condition_assignment: true }
            dead_assignments: true
            verify_php_doc_comments: { enabled: true, parameters: true, return: true, suggest_more_specific_types: true, ask_for_return_if_not_inferrable: true, ask_for_param_type_annotation: true }
            loops_must_use_braces: false
            check_usage_context: { enabled: false, method_call_on_non_object: { enabled: false, ignore_null_pointer: false }, foreach: { value_as_reference: false, traversable: false }, missing_argument: false, argument_type_checks: disabled }
            simplify_boolean_return: true
            phpunit_checks: false
            reflection_checks: false
            precedence_checks: { enabled: false, assignment_in_condition: false, comparison_of_bit_result: false }
            basic_semantic_checks: true
            doc_comment_fixes: true
            reflection_fixes: true
            use_statement_fixes: { enabled: false, remove_unused: false, preserve_multiple: false, order_alphabetically: false }
    php_code_sniffer:
        filter:
            excluded_paths: [vendor/*, languages/*, includes/libraries/*, assets/*, cache/* ]
        config:
            standard: "WordPress-Extra"
    sensiolabs_security_checker:
        filter:
            excluded_paths: [vendor/*, languages/*, includes/libraries/*, assets/*, cache/* ]
    php_loc:
        enabled: true
        excluded_dirs: [vendor/*, languages/*, includes/libraries/*, assets/*, cache/* ]
    php_cpd:
        enabled: true
        excluded_dirs: [vendor, languages, includes/libraries, assets, cache]
