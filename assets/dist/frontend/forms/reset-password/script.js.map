{"version":3,"file":"frontend/forms/reset-password/script.js","mappings":"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","sources":["webpack://connections/external window [\"wp\",\"i18n\"]","webpack://connections/./assets/src/forms/reset-password/index.js"],"sourcesContent":["var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Object is added to page utilizing the `wp_add_inline_script()` in Form\\Reset_Password.\n *\n * @param {Object} _resetPassword\n * @param {Object} _resetPassword.ajax          An object containing the site's admin URL and request endpoint.\n * @param {string} _resetPassword.ajax.root     The site's admin URL.\n * @param {string} _resetPassword.ajax.endpoint The request endpoint.\n * @param {string} pwsL10n.unknown\n * @param {string} pwsL10n.bad\n * @param {string} pwsL10n.good\n * @param {string} pwsL10n.strong\n * @param {string} pwsL10n.short\n */\n\n(function () {\n\tconst _observer = new MutationObserver((mutations) => {\n\t\tmutations.forEach((mutation) => {\n\t\t\tif ('data-pw' === mutation.attributeName) {\n\t\t\t\tif ('pass1' === mutation.target.name) {\n\t\t\t\t\tmutation.target.value = mutation.target.dataset.pw;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\t/**\n\t * @param {string} password\n\t * @return {number} The password strength score.\n\t * @private\n\t */\n\tconst _checkPasswordStrength = (password) => {\n\t\treturn wp.passwordStrength.meter(\n\t\t\tpassword,\n\t\t\twp.passwordStrength.userInputDisallowedList(),\n\t\t\tpassword\n\t\t);\n\t};\n\n\t/**\n\t * @param {number}    strength\n\t * @param {string}    password\n\t * @param {Element[]} elements\n\t * @private\n\t */\n\tconst _setPasswordStrengthClass = (strength, password, elements) => {\n\t\telements.forEach((element) => {\n\t\t\telement.classList.remove('short', 'bad', 'good', 'strong', 'empty');\n\n\t\t\tlet text = '&nbsp;';\n\n\t\t\tif (!password || '' === password.trim()) {\n\t\t\t\telement.classList.add('empty');\n\n\t\t\t\tif ('password-strength-result' === element.dataset.component) {\n\t\t\t\t\telement.innerHTML = text;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (strength) {\n\t\t\t\tcase -1:\n\t\t\t\t\telement.classList.add('bad');\n\t\t\t\t\ttext = pwsL10n.unknown;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\telement.classList.add('bad');\n\t\t\t\t\ttext = pwsL10n.bad;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\telement.classList.add('good');\n\t\t\t\t\ttext = pwsL10n.good;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\telement.classList.add('strong');\n\t\t\t\t\ttext = pwsL10n.strong;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\telement.classList.add('short');\n\t\t\t\t\ttext = pwsL10n.short;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\telement.classList.add('short');\n\t\t\t\t\ttext = pwsL10n.short;\n\t\t\t}\n\n\t\t\tif ('password-strength-result' === element.dataset.component) {\n\t\t\t\telement.innerHTML = text;\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * Whether the supplied string value is empty.\n\t *\n\t * @param {string} string\n\t * @return {boolean} Whether the supplied string is empty after trimming the space character.\n\t * @private\n\t */\n\tconst _isEmpty = (string) => {\n\t\treturn !string.trim().length;\n\t};\n\n\t/**\n\t * @param {number} score\n\t * @return {boolean} Whether the score indicates a weak password.\n\t * @private\n\t */\n\tconst _isWeakPw = (score) => {\n\t\treturn ![3, 4].includes(score);\n\t};\n\n\t/**\n\t * Toggle the input field type to password or text to show/hide a password.\n\t *\n\t * @param {Element} form\n\t * @private\n\t */\n\tconst _togglePasswordFieldType = (form) => {\n\t\tconst fields = form.querySelectorAll('.cbd-field--password');\n\n\t\tfields.forEach((field) => {\n\t\t\tif (field.type === 'password') {\n\t\t\t\tfield.setAttribute('type', 'text');\n\t\t\t} else {\n\t\t\t\tfield.setAttribute('type', 'password');\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * Toggle the display of the confirm weak password checkbox.\n\t *\n\t * @param {Element} element\n\t * @param {boolean} display\n\t * @private\n\t */\n\tconst _toggleWeakPasswordConfirm = (element, display) => {\n\t\tif (display) {\n\t\t\telement.style.display = 'block';\n\t\t} else {\n\t\t\telement.style.display = 'none';\n\t\t}\n\t};\n\n\t/**\n\t * Toggle the CSS classes that apply the dashicons to the toggle password visibility button.\n\t *\n\t * @param {Element} button\n\t * @private\n\t */\n\tconst _togglePasswordAttributes = (button) => {\n\t\tconst span = button.querySelector('span.dashicons');\n\t\tif (span.classList.contains('dashicons-hidden')) {\n\t\t\tspan.classList.remove('dashicons-hidden');\n\t\t\tspan.classList.add('dashicons-visibility');\n\t\t\tbutton.setAttribute(\n\t\t\t\t'aria-label',\n\t\t\t\t__('Show password', 'connections')\n\t\t\t);\n\t\t} else {\n\t\t\tspan.classList.remove('dashicons-visibility');\n\t\t\tspan.classList.add('dashicons-hidden');\n\t\t\tbutton.setAttribute(\n\t\t\t\t'aria-label',\n\t\t\t\t__('Hide password', 'connections')\n\t\t\t);\n\t\t}\n\t};\n\n\t/**\n\t * Trigger an event.\n\t *\n\t * @param {Element}      el\n\t * @param {Event|string} eventType\n\t * @private\n\t */\n\tconst _trigger = (el, eventType) => {\n\t\tif (\n\t\t\ttypeof eventType === 'string' &&\n\t\t\ttypeof el[eventType] === 'function'\n\t\t) {\n\t\t\tel[eventType]();\n\t\t} else {\n\t\t\tconst event =\n\t\t\t\ttypeof eventType === 'string'\n\t\t\t\t\t? new Event(eventType, { bubbles: true })\n\t\t\t\t\t: eventType;\n\t\t\tel.dispatchEvent(event);\n\t\t}\n\t};\n\n\t/*\n\t * Select all password reset forms on the page.\n\t */\n\tconst forms = document.querySelectorAll(\n\t\t'[data-component=\"form-reset_password\"]'\n\t);\n\n\tforms.forEach((form) => {\n\t\tconst pass1 = form.querySelector('input[name=\"pass1\"]');\n\t\tconst pass2 = form.querySelector('input[name=\"pass2\"]');\n\t\t/**\n\t\t * @type {Element[]} inputs\n\t\t */\n\t\tconst inputs = [\n\t\t\t...form.querySelectorAll(\n\t\t\t\t'input[type=\"text\"], input[type=\"password\"]'\n\t\t\t),\n\t\t];\n\t\tconst passwordStrength = form.querySelector(\n\t\t\t'[data-component=\"password-strength-result\"]'\n\t\t);\n\t\tconst weakpwConfirm = form.querySelector('input[name=\"pw_weak\"]');\n\t\tconst weakpw = weakpwConfirm.closest('div');\n\t\tconst toggle = form.querySelector('button[name=\"password-toggle\"]');\n\t\tconst generate = form.querySelector('button[name=\"generate-password\"]');\n\t\tconst submit = form.querySelector('button[name=\"wp-submit\"]');\n\t\tconst score = new WeakMap();\n\n\t\tscore.set(form, 0);\n\n\t\t/**\n\t\t * Whether the submit button is enabled.\n\t\t *\n\t\t * @param {boolean} weakPasswordConfirmed\n\t\t * @return {boolean} Returns true if the form submit is permitted.\n\t\t * @private\n\t\t */\n\t\tconst _allowSubmit = (weakPasswordConfirmed = false) => {\n\t\t\treturn (\n\t\t\t\t!_isEmpty(pass1.value) &&\n\t\t\t\t!_isEmpty(pass2.value) &&\n\t\t\t\tpass1.value === pass2.value &&\n\t\t\t\t(!_isWeakPw(score.get(form)) || weakPasswordConfirmed)\n\t\t\t);\n\t\t};\n\n\t\tinputs.forEach((input) => {\n\t\t\t/*\n\t\t\t * Set the disabled status of the submit button based on\n\t\t\t * whether values in both password fields are not empty and match.\n\t\t\t */\n\t\t\tinput.addEventListener('input', () => {\n\t\t\t\tsubmit.disabled = !inputs.every(() => {\n\t\t\t\t\treturn _allowSubmit(weakpwConfirm.checked);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t/*\n\t\t\t * Clear the \"Confirm new password\" field if user clears \"New password\" field and\n\t\t\t * sets the \"Confirm new password\" field disabled status accordingly.\n\t\t\t */\n\t\t\tif ('pass1' === input.name) {\n\t\t\t\tinput.addEventListener('input', (event) => {\n\t\t\t\t\tconst field = event.target;\n\n\t\t\t\t\tif (field.value.length === 0) {\n\t\t\t\t\t\tpass2.value = '';\n\t\t\t\t\t\tpass2.disabled = true;\n\n\t\t\t\t\t\tscore.set(form, 0);\n\n\t\t\t\t\t\t_toggleWeakPasswordConfirm(weakpw, false);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscore.set(form, _checkPasswordStrength(field.value));\n\n\t\t\t\t\t\t_toggleWeakPasswordConfirm(\n\t\t\t\t\t\t\tweakpw,\n\t\t\t\t\t\t\t_isWeakPw(score.get(form))\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tpass2.disabled = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t_setPasswordStrengthClass(score.get(form), field.value, [\n\t\t\t\t\t\tinput,\n\t\t\t\t\t\tpasswordStrength,\n\t\t\t\t\t]);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t/*\n\t\t * The even listener to toggle password field types from password to text.\n\t\t */\n\t\ttoggle.addEventListener('click', (event) => {\n\t\t\tconst button = event.currentTarget;\n\n\t\t\t_togglePasswordAttributes(button);\n\n\t\t\t_togglePasswordFieldType(\n\t\t\t\tbutton.closest('[data-component=\"form-reset_password\"]')\n\t\t\t);\n\t\t});\n\n\t\t/*\n\t\t * The event listener to toggle the submit button disable status\n\t\t * when confirming the use of a weak password.\n\t\t */\n\t\tweakpwConfirm.addEventListener('change', (event) => {\n\t\t\tsubmit.disabled = !_allowSubmit(event.target.checked);\n\t\t});\n\n\t\t/*\n\t\t * The event listener that performs a remote request to generate a new password.\n\t\t */\n\t\tgenerate.addEventListener('click', () => {\n\t\t\t// const button = event.target;\n\n\t\t\tconst data = new FormData();\n\n\t\t\tdata.append('action', 'generate-password');\n\n\t\t\t// eslint-disable-next-line no-undef\n\t\t\tfetch(_resetPassword.ajax.root + _resetPassword.ajax.endpoint, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: data,\n\t\t\t}).then((res) => {\n\t\t\t\tres.json().then((json) => {\n\t\t\t\t\tpass1.setAttribute('data-pw', json.data);\n\t\t\t\t\tpass2.value = pass1.dataset.pw;\n\t\t\t\t\tpass2.disabled = false;\n\t\t\t\t\tsubmit.disabled = false;\n\n\t\t\t\t\tscore.set(form, _checkPasswordStrength(json.data));\n\n\t\t\t\t\t_setPasswordStrengthClass(score.get(form), json.data, [\n\t\t\t\t\t\tpass1,\n\t\t\t\t\t\tpasswordStrength,\n\t\t\t\t\t]);\n\n\t\t\t\t\t_toggleWeakPasswordConfirm(\n\t\t\t\t\t\tweakpw,\n\t\t\t\t\t\t_isWeakPw(score.get(form))\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tform.addEventListener('reset', () => {\n\t\t\tscore.set(form, 0);\n\n\t\t\t_setPasswordStrengthClass(score.get(form), '', [\n\t\t\t\tpass1,\n\t\t\t\tpasswordStrength,\n\t\t\t]);\n\n\t\t\t_toggleWeakPasswordConfirm(weakpw, false);\n\t\t});\n\n\t\t/*\n\t\t * Hide the weak password confirmation field and label on load.\n\t\t */\n\t\t_toggleWeakPasswordConfirm(weakpw, false);\n\n\t\t/*\n\t\t * Watch for changes to the data attributes if the password field,\n\t\t * as generated passwords are saved as a data attribute.\n\t\t */\n\t\t_observer.observe(pass1, {\n\t\t\tattributes: true,\n\t\t});\n\n\t\t/*\n\t\t * On page load, trigger the AJAX call to generate a fresh password.\n\t\t */\n\t\t_trigger(generate, 'click');\n\t});\n})();\n"],"names":["window","_observer","MutationObserver","mutations","forEach","mutation","attributeName","target","name","value","dataset","pw","_checkPasswordStrength","password","wp","passwordStrength","meter","userInputDisallowedList","_setPasswordStrengthClass","strength","elements","element","classList","remove","text","trim","add","component","innerHTML","pwsL10n","unknown","bad","good","strong","short","_isEmpty","string","length","_isWeakPw","score","includes","_toggleWeakPasswordConfirm","display","style","document","querySelectorAll","form","pass1","querySelector","pass2","inputs","weakpwConfirm","weakpw","closest","toggle","generate","submit","WeakMap","set","_allowSubmit","weakPasswordConfirmed","arguments","undefined","get","input","addEventListener","disabled","every","checked","event","field","button","currentTarget","span","contains","setAttribute","__","_togglePasswordAttributes","type","_togglePasswordFieldType","data","FormData","append","fetch","_resetPassword","ajax","root","endpoint","method","body","then","res","json","observe","attributes","_trigger","el","eventType","Event","bubbles","dispatchEvent"],"sourceRoot":""}