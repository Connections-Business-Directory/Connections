jQuery((function($){const map=[];let id=0;$.fn.mapBlock=function(options){console.log("mapBlock found.");const attributes={};$.each($(this).get(0).attributes,(function(i,attrib){"data"===attrib.name.substring(0,4)&&(attributes[attrib.name]=attrib.value.replace(/_/g," "))})),console.log(attributes),$.each(attributes,(function(key,value){const property=key.replace("data-","").split("-");1===property.length&&(options[property[0]]=value)})),console.log(options);const mapContainerID=$(this).attr("id");console.log(mapContainerID),$("#"+mapContainerID).on("appear",{id:id,data:options},(function(event,elements){elements.each((function(){const mapID=event.data.id,mapOptions=event.data.data,mapContainer=$(this).attr("id");if(console.log(mapContainer+":isVisible"),void 0===map[mapID]){map[mapID]=L.map(mapContainer).setView(L.latLng(mapOptions.center.split(",")),1),map[mapID].attributionControl.setPrefix("");const basemap={};$.each($(this).children("map-tilelayer"),(function(index,item){const provider=$(item),tiles=/^google/.test(provider.data("id"))?L.gridLayer.googleMutant({type:provider.data("type"),attribution:provider.html()}):L.tileLayer(provider.data("url"),{attribution:provider.html(),subdomains:provider.data("subdomains"),minZoom:provider.data("minzoom"),maxZoom:provider.data("maxzoom")});$.isEmptyObject(basemap)&&tiles.addTo(map[mapID]);const control=$("map-control-layers").find('[data-id="'+provider.data("id")+'"]');control.length&&(basemap[control.html()]=tiles)}));const layers=[],overlay={},bounds=L.latLngBounds([]);let markerCount=0;if($.each($(this).children("map-layergroup"),(function(layerIndex,layerItem){console.log(layerItem);const layer=$(layerItem),layerID=layer.data("id"),markers=[];$.each($(this).children("map-marker"),(function(markerIndex,markerItem){console.log(markerItem);const marker=$(markerItem),latitude=marker.data("latitude"),longitude=marker.data("longitude"),popup=marker.find("map-marker-popup");0===popup.length?markers.push(L.marker([latitude,longitude])):markers.push(L.marker([latitude,longitude]).bindPopup(popup.html())),markerCount++})),layers[layerID]=L.featureGroup(markers).addTo(map[mapID]),bounds.extend(layers[layerID].getBounds());const control=$("map-control-layers").find('[data-mapID="'+layerID+'"]');control.length&&(overlay[control.html()]=layers[layerID])})),$.each($(this).children("map-marker"),(function(index,item){const markers=[];console.log(item);const marker=$(item),latitude=marker.data("latitude"),longitude=marker.data("longitude"),popup=marker.find("map-marker-popup");0===popup.length?markers.push(L.marker([latitude,longitude])):markers.push(L.marker([latitude,longitude]).bindPopup(popup.html()));const group=L.featureGroup(markers).addTo(map[mapID]);bounds.extend(group.getBounds()),markerCount++})),!$.isEmptyObject(basemap)||!$.isEmptyObject(overlay)){const layerControl=$(this).find("map-control-layers");L.control.layers(basemap,overlay,{collapsed:layerControl.data("collapsed"),hideSingleBase:!0}).addTo(map[mapID])}bounds.isValid()&&map[mapID].fitBounds(bounds,{padding:L.point(20,20)}),1>=markerCount&&map[mapID].setZoom(mapOptions.zoom),map[mapID].on("overlayadd overlayremove",(function(e){console.log(e);const bounds=new L.LatLngBounds([]);map[mapID].eachLayer((function(layer){layer instanceof L.FeatureGroup&&bounds.extend(layer.getBounds())})),bounds.isValid()?map[mapID].fitBounds(bounds):map[mapID].fitWorld()}))}}))})),$.inView("#"+mapContainerID),id++},$("map-block").each((function(){const options={};$(this).mapBlock(options)})),$.force_appear()})),function($){const selectors=[];let checkBinded=!1,checkLock=!1;const defaults={interval:250,force_process:!1},$window=$(window),$priorAppeared=[],$inView=[];function appeared(selector){return $(selector).filter((function(){return $(this).is(":appeared")}))}function process(){checkLock=!1;for(let index=0,selectorsLength=selectors.length;index<selectorsLength;index++){const $appeared=appeared(selectors[index]);if($appeared.length&&!0!==$inView[index]&&($appeared.trigger("appear",[$appeared]),$inView[index]=!0),$priorAppeared[index]){const $disappeared=$priorAppeared[index].not($appeared);$disappeared.length&&($disappeared.trigger("disappear",[$disappeared]),$inView[index]=!1)}$priorAppeared[index]=$appeared}}function addSelector(selector){selectors.push(selector),$priorAppeared.push()}$.expr.pseudos.appeared=$.expr.createPseudo((function(){return function(element){const $element=$(element);if(!$element.is(":visible"))return!1;const windowLeft=$window.scrollLeft(),windowTop=$window.scrollTop(),offset=$element.offset(),left=offset.left,top=offset.top;return top+$element.height()>=windowTop&&top-($element.data("in-view-top-offset")||0)<=windowTop+$window.height()&&left+$element.width()>=windowLeft&&left-($element.data("in-view-left-offset")||0)<=windowLeft+$window.width()}})),$.fn.extend({inView(selector,options){return $.inView(this,options),this}}),$.extend({inView(selector,options){const opts=$.extend({},defaults,options||{});if(!checkBinded){const onCheck=function(){checkLock||(checkLock=!0,setTimeout(process,opts.interval))};$(window).on("scroll",onCheck).on("resize",onCheck).on("click",onCheck),checkBinded=!0}opts.force_process&&setTimeout(process,opts.interval),addSelector(selector)},force_appear:()=>!!checkBinded&&(process(),!0)})}(jQuery);