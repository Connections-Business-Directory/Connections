<?php
/*
Plugin Name: Connections
Plugin URI: http://connections-pro.com/
Description: A business directory and address book manager.
Version: 0.7.6.6
Author: Steven A. Zahm
Author URI: http://connections-pro.com/
Text Domain: connections
Domain Path: /lang

	Copyright 2009  Steven A. Zahm  (email : helpdesk@connections-pro.com)

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License, version 2, as
    published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

/*
 * Credits:
 *
 * Connections is based on Little Black Book  1.1.2 by Gerald S. Fuller
 * Little Black Book is based on Addressbook 0.7 by Sam Wilson
 *
 * Uses a function here and there from NextGEN Gallery by Alex Rabe.
 * http://wordpress.org/extend/plugins/nextgen-gallery/
 *
 * Update Notice in plugin admin inspired by Changelogger 1.2.8 by Oliver Schlöbe.
 * http://wordpress.org/extend/plugins/changelogger/
 *
 * class.upload.php by Colin Verot.
 * http://www.verot.net
 *
 * TimThumb by Ben Gillbanks and Mark Maunder.
 * Based on work done by Tim McDaniels and Darren Hoyt.
 * http://code.google.com/p/timthumb/
 *
 * vCard class is a modified version by Troy Wolf.
 * http://www.troywolf.com/articles/php/class_vcard/
 *
 * Screen Options class by Janis Elsts
 * http://w-shadow.com/blog/2010/06/29/adding-stuff-to-wordpress-screen-options/
 *
 * spin.js by Felix Gnass
 * http://fgnass.github.com/spin.js/
 *
 * $.goMap() jQuery Google Maps Plugin by Jevgenijs Shtrauss
 * http://www.pittss.lv/jquery/gomap/
 *
 * MarkerClusterer jQuery Google Maps Marker Clustering Plugin by Xiaoxi Wu
 * http://gmaps-utility-library-dev.googlecode.com/svn/tags/markerclusterer/
 *
 * jQuery Validation Plugin by Jörn Zaefferer
 * http://bassistance.de/jquery-plugins/jquery-plugin-validation/
 *
 * Preloading GIF generated by Preloaders.net
 * http://www.preloaders.net/
 *
 * Email and URL validation methods by Gizmo Digital Fusion
 * http://wpcodesnippets.info/blog/two-useful-php-validation-functions.html
 *
 * Social media icons by WPZOOM.com
 * http://www.wpzoom.com/wpzoom/500-free-icons-wpzoom-social-networking-icon-set/
 * License CC BY-SA 3.0  http://creativecommons.org/licenses/by-sa/3.0/
 *
 * iTunes icon by Paul Robert Lloyd
 * http://www.iconfinder.com/icondetails/43155/48/itunes_icon
 * http://paulrobertlloyd.com/
 * License Attribution-ShareAlike 2.0 UK: England & Wales (CC BY-SA 2.0)
 *
 * Podcast icon by schollidesign
 * http://findicons.com/icon/94188/podcast_new)
 * License GNU/GPL
 *
 * vCard Icon by Oliver Twardowski
 * http://www.iconfinder.com/icondetails/50717/48/add_vcard_icon
 * License Free for commercial use
 * http://www.iconfinder.com/browse/iconset/iconset-addictive-flavour/#readme
 *
 * jQuery UI CSS and icons by helenhousandi
 * https://github.com/helenhousandi/wp-admin-jquery-ui
 */

/**
 *
 *
 * @TODO: Add support for SSL using the CN_PLUGIN_URL constant throughout.
 */


if ( ! class_exists( 'connectionsLoad' ) ) {

	class connectionsLoad {

		public $currentUser;
		public $options;
		public $retrieve;
		public $term;

		/**
		 * Stores the page hook values returned from the add_menu_page & add_submenu_page functions
		 *
		 * @access public
		 * @since unknown
		 * @var object
		 */
		public $pageHook;

		/**
		 * The Connections Settings API Wrapper class.
		 *
		 * @access public
		 * @since unknown
		 * @var object
		 */
		public $settings;

		/**
		 * Do the database upgrade.
		 *
		 * @var bool
		 */
		private $dbUpgrade = FALSE;

		/**
		 * Stores the template parts object and any templates activated by the cnTemplateFactory object.
		 *
		 * NOTE: Technically not necessary to load the template parts into this opject but it's required
		 * for backward compatibility for templates expecting to find those methods as part of this object.
		 *
		 * @access public
		 * @since 0.7.6
		 * @var (object)
		 */
		public $template;


		public function __construct() {

			$this->defineConstants();
			$this->loadDependencies();
			$this->initDependencies();

			// Activation/Deactivation hooks
			register_activation_hook( dirname( __FILE__ ) . '/connections.php', array( __CLASS__, 'activate' ) );
			register_deactivation_hook( dirname( __FILE__ ) . '/connections.php', array( __CLASS__, 'deactivate' ) );

			//@TODO: Create uninstall method to remove options and tables.
			// register_uninstall_hook( dirname(__FILE__) . '/connections.php', array('connectionsLoad', 'uninstall') );

			// Start this plug-in once all other plugins are fully loaded
			add_action( 'plugins_loaded', array( __CLASS__, 'start' ) );
		}

		public static function start() {
			global $connections;

			//$connections->options->setDBVersion('0.1.8'); $connections->options->saveOptions();

			// Load the translation files.
			load_plugin_textdomain( 'connections' , false , CN_DIR_NAME . '/lang' );

			/*
			 * Register the settings tabs shown on the Settings admin page tabs, sections and fields.
			 */
			add_filter( 'cn_register_settings_tabs' , array( 'cnRegisterSettings', 'registerSettingsTabs' ) , 10 , 1 );
			add_filter( 'cn_register_settings_sections' , array( 'cnRegisterSettings', 'registerSettingsSections' ) , 10 , 1 );
			add_filter( 'cn_register_settings_fields' , array( 'cnRegisterSettings', 'registerSettingsFields' ) , 10 , 1 );

			// Setup the current user object
			$current_user = wp_get_current_user();
			$connections->currentUser->setID( $current_user->ID );

			if ( is_admin() ) {

				// Calls the method to load the admin menus.
				add_action( 'admin_menu', array( $connections , 'adminMenu' ) );

				add_action( 'admin_init', array( __CLASS__, 'adminInit' ) );

				// Parse admin queries.
				add_action( 'admin_init', array( $connections, 'adminActions' ) );

				/*
				 * Add the filter to update the user settings when the 'Apply" button is clicked.
				 * NOTE: This relies on the the Screen Options class by Janis Elsts
				 * NOTE: This filter must be init here otherwise it registers to late to be run.
				 */
				add_filter( 'set-screen-option', array( __CLASS__, 'managePageLimitSave' ), 10 , 3 );

			} else {

				/*
				 * Process front end actions.
				 */
				add_action( 'template_redirect' , array( $connections, 'frontendActions' ) );
			}

		}

		private function defineConstants() {
			global $wpdb, $blog_id;

			define( 'CN_LOG', FALSE );

			define( 'CN_CURRENT_VERSION', '0.7.6.6' );
			define( 'CN_DB_VERSION', '0.1.9' );

			/*
			 * To run Connections in single site mode on multi-site.
			 * Add to wp-config.php: define('CN_MULTISITE_ENABLED', FALSE);
			 *
			 * @credit lancelot-du-lac
			 * @url http://wordpress.org/support/topic/plugin-connections-support-multisite-in-single-mode
			 */
			if ( ! defined( 'CN_MULTISITE_ENABLED' ) ) {
				if ( is_multisite() ) {
					define( 'CN_MULTISITE_ENABLED', TRUE );
				} else {
					define( 'CN_MULTISITE_ENABLED', FALSE );
				}
			}


			/*
			 * Enable support for multi-site file locations.
			 * @url http://codex.wordpress.org/Determining_Plugin_and_Content_Directories#Available_Functions
			 */
			if ( is_multisite() && CN_MULTISITE_ENABLED ) {
				define( 'CN_IMAGE_PATH', WP_CONTENT_DIR . '/blogs.dir/' . $blog_id . '/connection_images/' );
				define( 'CN_IMAGE_BASE_URL', network_site_url( '/wp-content/blogs.dir/' . $blog_id . '/connection_images/' ) );
				define( 'CN_CUSTOM_TEMPLATE_PATH', WP_CONTENT_DIR . '/blogs.dir/' . $blog_id . '/connections_templates/' );
				define( 'CN_CUSTOM_TEMPLATE_URL', network_site_url( '/wp-content/blogs.dir/' . $blog_id . '/connections_templates/' ) );
			} else {
				define( 'CN_IMAGE_PATH', WP_CONTENT_DIR . '/connection_images/' );
				define( 'CN_IMAGE_BASE_URL', content_url() . '/connection_images/' );
				define( 'CN_CUSTOM_TEMPLATE_PATH', WP_CONTENT_DIR . '/connections_templates/' );
				define( 'CN_CUSTOM_TEMPLATE_URL', content_url() . '/connections_templates/' );
			}

			/*
			 * Set the table prefix accordingly depedning if Connections is installed on a multisite WP installation.
			 */
			$prefix = ( is_multisite() && CN_MULTISITE_ENABLED ) ? $wpdb->prefix : $wpdb->base_prefix;

			define( 'CN_ENTRY_TABLE', $prefix . 'connections' );
			define( 'CN_ENTRY_ADDRESS_TABLE', $prefix . 'connections_address' );
			define( 'CN_ENTRY_PHONE_TABLE', $prefix . 'connections_phone' );
			define( 'CN_ENTRY_EMAIL_TABLE', $prefix . 'connections_email' );
			define( 'CN_ENTRY_MESSENGER_TABLE', $prefix . 'connections_messenger' );
			define( 'CN_ENTRY_SOCIAL_TABLE', $prefix . 'connections_social' );
			define( 'CN_ENTRY_LINK_TABLE', $prefix . 'connections_link' );
			define( 'CN_ENTRY_DATE_TABLE', $prefix . 'connections_date' );

			define( 'CN_ENTRY_TABLE_META', $prefix . 'connections_meta' );
			define( 'CN_TERMS_TABLE', $prefix . 'connections_terms' );
			define( 'CN_TERM_TAXONOMY_TABLE', $prefix . 'connections_term_taxonomy' );
			define( 'CN_TERM_RELATIONSHIP_TABLE', $prefix . 'connections_term_relationships' );

			define( 'CN_DIR_NAME', plugin_basename( dirname( __FILE__ ) ) );
			define( 'CN_BASE_NAME', plugin_basename( __FILE__ ) );
			define( 'CN_PATH', plugin_dir_path( __FILE__ ) );
			define( 'CN_URL', plugin_dir_url( __FILE__ ) );

			define( 'CN_TEMPLATE_PATH', CN_PATH . 'templates/' );
			define( 'CN_TEMPLATE_URL', CN_URL . 'templates/' );
			define( 'CN_CACHE_PATH', CN_PATH . 'cache/' );
		}

		private function loadDependencies() {
			/**
			 * @TODO: Load dependencies as needed. For example load only classes needed in the admin and frontend
			 */
			//Current User objects
			require_once CN_PATH . 'includes/class.user.php'; // Required for activation
			//Terms Objects
			require_once CN_PATH . 'includes/class.terms.php'; // Required for activation
			//Category Objects
			require_once CN_PATH . 'includes/class.category.php'; // Required for activation, entry list
			//Retrieve objects from the db.
			require_once CN_PATH . 'includes/class.retrieve.php'; // Required for activation
			//HTML FORM objects
			require_once CN_PATH . 'includes/class.form.php'; // Required for activation
			//date objects
			require_once CN_PATH . 'includes/class.date.php'; // Required for activation, entry list, add entry
			//entry objects
			require_once CN_PATH . 'includes/class.entry.php'; // Required for activation, entry list
			//plugin option objects
			require_once CN_PATH . 'includes/class.options.php'; // Required for activation
			//plugin utility objects
			require_once CN_PATH . 'includes/class.utility.php'; // Required for activation, entry list
			//plugin template objects
			require_once CN_PATH . 'includes/class.output.php'; // Required for activation, entry list
			//builds vCard
			require_once CN_PATH . 'includes/class.vcard.php'; // Required for front end

			// geocoding
			require_once CN_PATH . 'includes/class.geo.php'; // Required

			//shortcodes
			require_once CN_PATH . 'includes/inc.shortcodes.php'; // Required for front end

			//templates
			require_once CN_PATH . 'includes/class.template-api.php';
			require_once CN_PATH . 'includes/class.template-parts.php';
			require_once CN_PATH . 'includes/class.template.php';

			// The class that inits the registered query vars, rewites reuls and canonical redirects.
			require_once CN_PATH . 'includes/class.rewrite.php';

			// Load the Connections Settings API Wrapper Class.
			require_once CN_PATH . 'includes/class.settings-api.php';

			// Load the Connections core settings admin page tabs, section and fields using the WordPress Settings API.
			require_once CN_PATH . 'includes/class.settings.php';

			// Load the class that manages the registration and enqueueing of CSS and JS files.
			require_once CN_PATH . 'includes/class.scripts.php';

			// Load the included templates that use the templates API introduced in 0.7.6
			include_once CN_PATH . 'templates/names/names.php';

			if ( is_admin() ) {
				/*
				 * Include the Screen Options class by Janis Elsts
				 * http://w-shadow.com/blog/2010/06/29/adding-stuff-to-wordpress-screen-options/
				 */
				include CN_PATH . 'includes/screen-options/screen-options.php';

				// The class for working with the file system.
				require_once CN_PATH . 'includes/class.filesystem.php';

				// The class for handling admin notices.
				require_once CN_PATH . 'includes/class.message.php';

				// Class used for managing role capabilites.
				require_once CN_PATH . 'includes/class.capabilities.php';

				// The class for processing admin actions.
				require_once CN_PATH . 'includes/class.admin-actions.php';
			}

		}

		private function initDependencies() {
			$this->options = new cnOptions();
			$this->settings = cnSettingsAPI::getInstance();
			$this->pageHook = new stdClass();
			$this->currentUser = new cnUser();
			$this->retrieve = new cnRetrieve();
			$this->term = new cnTerms();
			$this->template = new cnTemplatePart();
			$this->url = new cnURL();

			// Init the Template Factory API
			cnTemplateFactory::init();

			// Init the Template Parts API
			cnTemplatePart::init();

			// Register all valid query variables.
			cnRewrite::init();

			// Init the included templates that use the API introduced in 0.7.6
			add_action( 'plugins_loaded', array( 'cnNames', 'init' ), 11 );

			// Register and Enqueue the CSS and JavaScript libraries.
			cnScript::init();

			// Init the options if there is a version change just in case there were any changes.
			if ( version_compare( $this->options->getVersion() , CN_CURRENT_VERSION ) < 0 ) $this->initOptions();
		}

		/**
		 * During activation this will initiate the options.
		 */
		private function initOptions() {
			$version = $this->options->getVersion();

			switch ( TRUE ) {

				case ( version_compare( $version, '0.7.3', '<' ) ) :
					/*
					 * Retrieve the settings stored prior to 0.7.3 and migrate them
					 * so they will be accessible in the structure supported by the
					 * Connections WordPress Settings API Wrapper Class.
					 */
					if ( get_option( 'connections_options' ) !== FALSE ) {
						$options = get_option( 'connections_options' );

						if ( get_option( 'connections_login' ) === FALSE ) {
							update_option( 'connections_login' , array(
									'required' => $options['settings']['allow_public'],
									'message' => 'Please login to view the directory.'
								)
							);
						}

						if ( get_option( 'connections_visibility' ) === FALSE ) {
							update_option( 'connections_visibility' , array(
									'allow_public_override' => $options['settings']['allow_public_override'],
									'allow_private_override' => $options['settings']['allow_private_override']
								)
							);
						}

						if ( get_option( 'connections_image_thumbnail' ) === FALSE ) {
							update_option( 'connections_image_thumbnail' , array(
									'quality' => $options['settings']['image']['thumbnail']['quality'],
									'width' => $options['settings']['image']['thumbnail']['x'],
									'height' => $options['settings']['image']['thumbnail']['y'],
									'ratio' => $options['settings']['image']['thumbnail']['crop']
								)
							);
						}
						if ( get_option( 'connections_image_medium' ) === FALSE ) {
							update_option( 'connections_image_medium' , array(
									'quality' => $options['settings']['image']['entry']['quality'],
									'width' => $options['settings']['image']['entry']['x'],
									'height' => $options['settings']['image']['entry']['y'],
									'ratio' => $options['settings']['image']['entry']['crop']
								)
							);
						}

						if ( get_option( 'connections_image_large' ) === FALSE ) {
							update_option( 'connections_image_large' , array(
									'quality' => $options['settings']['image']['profile']['quality'],
									'width' => $options['settings']['image']['profile']['x'],
									'height' => $options['settings']['image']['profile']['y'],
									'ratio' => $options['settings']['image']['profile']['crop']
								)
							);
						}

						if ( get_option( 'connections_image_logo' ) === FALSE ) {
							update_option( 'connections_image_logo' , array(
									'quality' => $options['settings']['image']['logo']['quality'],
									'width' => $options['settings']['image']['logo']['x'],
									'height' => $options['settings']['image']['logo']['y'],
									'ratio' => $options['settings']['image']['logo']['crop']
								)
							);
						}

						if ( get_option( 'connections_compatibility' ) === FALSE ) {
							update_option( 'connections_compatibility' , array(
									'google_maps_api' => $options['settings']['advanced']['load_google_maps_api'],
									'javascript_footer' => $options['settings']['advanced']['load_javascript_footer'] )
							);
						}

						if ( get_option( 'connections_debug' ) === FALSE ) update_option( 'connections_debug' , array( 'debug_messages' => $options['debug'] ) );

						unset( $options );

					}


				case ( version_compare( $version, '0.7.4', '<' ) ) :
					/*
					 * The option to disable keyowrd search was added in version 0.7.4. Set this option to be enabled by default.
					 */
					$options = get_option( 'connections_search' );
					$options['keyword_enabled'] = 1;

					update_option( 'connections_search', $options );
					unset( $options );

			}

			if ( $this->options->getDefaultTemplatesSet() === NULL ) $this->options->setDefaultTemplates();

			// Class used for managing role capabilites.
			// @TODO: a version change should not reset the roles and capabilites.
			if ( ! class_exists( 'cnRole' ) ) require_once CN_PATH . 'includes/class.capabilities.php';
			cnRole::reset();

			// Increment the version number.
			$this->options->setVersion( CN_CURRENT_VERSION );

			// Save the options
			$this->options->saveOptions();

			/*
			 * This option is added for a check that will force a flush_rewrite() in connectionsLoad::adminInit() once.
			 * Should save the user from having to "save" the permalink settings.
			 */
			update_option( 'connections_flush_rewrite', '1' );
		}

		/**
		 * This is a deprecated helper function left in place until all instances of it are removed from the code base.
		 * This purposefully is blank.
		 *
		 * @access public
		 * @since unknown
		 * @deprecated 0.7.5
		 * @return void
		 */
		public function displayMessages() { /* Do nothing here */ }

		/**
		 * Set a runtime action/error message.
		 * This is a deprecated helper function left in place until all instances of it are removed from the code base.
		 *
		 * @access public
		 * @since unknown
		 * @deprecated 0.7.5
		 * @return void
		 */
		public function setRuntimeMessage( $type , $message ) {
			cnMessage::runtime( $type, $message );
		}

		/**
		 * Store an error code.
		 * This is a deprecated helper function left in place until all instances of it are removed from the code base.
		 *
		 * @access public
		 * @since unknown
		 * @deprecated 0.7.5
		 * @return void
		 */
		public function setErrorMessage( $code ) {
			cnMessage::set( 'error', $code );
		}

		/**
		 * Store a success code.
		 * This is a deprecated helper function left in place until all instances of it are removed from the code base.
		 *
		 * @access public
		 * @since unknown
		 * @deprecated 0.7.5
		 * @return void
		 */
		public function setSuccessMessage( $code ) {
			cnMessage::set( 'success', $code );
		}

		/**
		 * Called when activating Connections via the activation hook.
		 */
		public static  function activate() {
			global $wpdb, $connections;

			require_once CN_PATH . 'includes/class.schema.php';

			// Create the table structure.
			cnSchema::create();

			// Create the required directories and attempt to make them writable.
			cnFileSystem::mkdirWritable( CN_CACHE_PATH );
			cnFileSystem::mkdirWritable( CN_IMAGE_PATH );
			cnFileSystem::mkdirWritable( CN_CUSTOM_TEMPLATE_PATH );

			// Add a blank index.php file.
			cnFileSystem::mkIndex( CN_IMAGE_PATH );
			cnFileSystem::mkIndex( CN_CUSTOM_TEMPLATE_PATH );

			// Add an .htaccess file, create it if one doesn't exist, and add the no indexes option.
			// cnFileSystem::noIndexes( CN_IMAGE_PATH ); // Causes some servers to respond w/ 403 when servering images.
			cnFileSystem::noIndexes( CN_CUSTOM_TEMPLATE_PATH );

			$connections->initOptions();

			/*
			 * Add the page rewrite rules.
			 */
			add_filter( 'root_rewrite_rules', array( 'cnRewrite', 'addRootRewriteRules' ) );
			add_filter( 'page_rewrite_rules', array( 'cnRewrite', 'addPageRewriteRules' ) );

			// Flush so they are rebuilt.
			flush_rewrite_rules();
		}

		/**
		 * Called when deactivating Connections via the deactivation hook.
		 */
		public static function deactivate() {
			/*
			 * Since we're adding the rewrite rules using a filter, make sure to remove the filter
			 * before flushing, otherwise the rules will not be removed.
			 */
			remove_filter( 'root_rewrite_rules', array( 'cnRewrite', 'addRootRewriteRules' ) );
			remove_filter( 'page_rewrite_rules', array( 'cnRewrite', 'addPageRewriteRules' ) );

			// Flush so they are rebuilt.
			flush_rewrite_rules();

			//global $options;

			/* This should be occur in the unistall hook
			$this->options->removeDefaultCapabilities();
			*/

			//  DROP TABLE `cnpfresh_connections`, `cnpfresh_connections_terms`, `cnpfresh_connections_term_relationships`, `cnpfresh_connections_term_taxonomy`;
			//  DELETE FROM `nhonline_freshcnpro`.`cnpfresh_options` WHERE `cnpfresh_options`.`option_name` = 'connections_options'
		}

		/**
		 * Initialize the admin.
		 *
		 * @access private
		 * @since unknown
		 * @uses WP_Error()
		 * @uses get_option()
		 * @uses delete_option()
		 * @uses add_action()
		 * @uses add_filter()
		 * @uses add_screen_options_panel()
		 * @return void
		 */
		public static function adminInit() {
			global $connections;

			// Initiate admin messages.
			cnMessage::init();

			// Initiate admin actions.
			cnAdminActions::init();

			// If the user changed the base slugs for the permalinks, flush the rewrite rules.
			if ( get_option( 'connections_flush_rewrite' ) ) {
				flush_rewrite_rules();
				delete_option( 'connections_flush_rewrite' );
			}

			/*
			 * If the home page has not been set, nag the user to set it.
			 */
			$directoryHome = $connections->settings->get( 'connections', 'connections_home_page', 'page_id' );
			if ( ! $directoryHome ) cnMessage::create( 'notice', 'home_page_set_failed' );

			// Check if the db requires updating, display message if it does.
			if ( version_compare( $connections->options->getDBVersion(), CN_DB_VERSION, '<' ) ) {
				$connections->dbUpgrade = TRUE;

				add_action( 'current_screen', array( __CLASS__, 'displayDBUpgradeNotice' ) );
			}

			/*
			 * Add admin notices if required directories are not present or not writeable.
			 */
			if ( ! file_exists( CN_IMAGE_PATH ) ) cnMessage::create( 'notice', 'image_path_exists_failed' );
			if ( file_exists( CN_IMAGE_PATH ) && ! is_writeable( CN_IMAGE_PATH ) ) cnMessage::create( 'notice', 'image_path_writeable_failed' );
			if ( ! file_exists( CN_CUSTOM_TEMPLATE_PATH ) ) cnMessage::create( 'notice', 'template_path_exists_failed' );
			if ( file_exists( CN_CUSTOM_TEMPLATE_PATH ) && ! is_writeable( CN_CUSTOM_TEMPLATE_PATH ) ) cnMessage::create( 'notice', 'template_path_writeable_failed' );
			if ( ! file_exists( CN_CACHE_PATH ) ) cnMessage::create( 'notice', 'cache_path_exists_failed' );
			if ( file_exists( CN_CACHE_PATH ) && ! is_writeable( CN_CACHE_PATH ) ) cnMessage::create( 'notice', 'cache_path_writeable_failed' );

			// Add Settings link to the plugin actions
			add_action( 'plugin_action_links_' . CN_BASE_NAME, array( __CLASS__, 'addActionLinks' ) );

			// Add FAQ, Support and Donate links
			add_filter( 'plugin_row_meta', array( __CLASS__, 'addMetaLinks' ), 10, 2 );

			// Add Changelog table row in the Manage Plugins admin page.
			add_action( 'after_plugin_row_' . CN_BASE_NAME, array( __CLASS__, 'displayUpgradeNotice' ), 1, 0 );
			// Maybe should use this action hook instead: in_plugin_update_message-{$file}

			/*
			 * In instances such as WP AJAX requests the add_menu() and add_sub_menu() functions are
			 * not run in the admin_menu action, so the properties would not exist and will throw
			 * PHP notices when attempting to access them. If the menus have been added then the
			 * properties will exist so it will be safe to add the actions using the properties.
			 */
			if ( get_object_vars( $connections->pageHook ) && current_user_can( 'connections_view_menu') ) {
				// Register the edit metaboxes.
				add_action( 'load-' . $connections->pageHook->add, array( __CLASS__, 'registerEditMetaboxes' ) );
				add_action( 'load-' . $connections->pageHook->manage, array( __CLASS__, 'registerEditMetaboxes' ) );

				// Register the Dashboard metaboxes.
				add_action( 'load-' . $connections->pageHook->dashboard, array( __CLASS__, 'registerDashboardMetaboxes' ) );

				/*
				 * Add the panel to the "Screen Options" box to the manage page.
				 * NOTE: This relies on the the Screen Options class by Janis Elsts
				 */
				add_screen_options_panel( 'cn-manage-page-limit' , 'Show on screen' , array( __CLASS__, 'managePageLimit' ) , $connections->pageHook->manage , array( __CLASS__, 'managePageLimitSaveAJAX' ) , FALSE );
			}
		}

		/**
		 * Display the database upgrade notice. This will only be shown on non-Connections pages.
		 *
		 * @access private
		 * @since 0.7.5
		 * @uses get_current_screen()
		 * @return void
		 */
		public static function displayDBUpgradeNotice() {
			global $connections;

			$screen = get_current_screen();
			if ( ! in_array( $screen->id, (array) $connections->pageHook ) ) cnMessage::create( 'notice', 'db_update_required' );
		}

		/**
		 * Add the page limit panel to the screen options of the manage page.
		 * NOTE: This relies on the the Screen Options class by Janis Elsts
		 *
		 * @access private
		 * @since unknown
		 * @return (string)
		 */
		public static function managePageLimit() {
			global $connections;

			$page = $connections->currentUser->getFilterPage( 'manage' );

			$out = '<label><input type="text" class="entry-per-page" name="wp_screen_options[value]" id="edit_entry_per_page" maxlength="3" value="' . $page->limit . '" />' . __( 'Entries', 'connections' ) . '</label>';
			$out .= '<input type="hidden" name="wp_screen_options[option]" id="edit_entry_per_page_name" value="connections" />';
			$out .= '<input type="submit" name="screen-options-apply" id="entry-per-page-apply" class="button" value="Apply"  />';

			return $out;
		}

		/**
		 * Save the user setting for the page limit on the screen options of the manage page.
		 * NOTE: This is only run during the AJAX callback which is currently disabled.
		 * NOTE: This relies on the the Screen Options class by Janis Elsts
		 *
		 * @access private
		 * @since unknown
		 * @return void
		 */
		public static  function managePageLimitSaveAJAX() {
			include_once CN_PATH . '/includes/inc.processes.php';

			processSetUserFilter();
		}

		/**
		 * Save the user entered value for display n-number of entries on the manage admin page.
		 *
		 * @access private
		 * @since unknown
		 * @uses get_user_meta()
		 * @param (bool) $false
		 * @param (string) $option
		 * @param (int) $value
		 * @return (array)
		 */
		public function managePageLimitSave( $false = FALSE , $option , $value ) {
			global $connections;

			$user_meta = get_user_meta( $connections->currentUser->getID() , $option, TRUE );

			$user_meta['filter']['manage']['limit'] = absint( $value );
			$user_meta['filter']['manage']['current'] = 1;

			return $user_meta;
		}

		/**
		 * Register the admin menus for Connections
		 *
		 * @access private
		 * @since unknown
		 * @author Steven A. Zahm
		 * @return void
		 */
		public function adminMenu() {

			if ( ! current_user_can( 'connections_view_menu') ) return;

			// Set the capability string to be used in the add_sub_menu function per role capability assigned to the current user.
			if ( current_user_can( 'connections_add_entry_moderated' ) ) {
				$addEntryCapability = 'connections_add_entry_moderated';
			}
			elseif ( current_user_can( 'connections_add_entry' ) ) {
				$addEntryCapability = 'connections_add_entry';
			}
			else {
				$addEntryCapability = 'connections_add_entry_moderated';
			}

			// Register the top level menu item.
			$this->pageHook->topLevel = add_menu_page( 'Connections', 'Connections', 'connections_view_dashboard', 'connections_dashboard', array ( &$this, 'showPage' ), CN_URL . 'images/menu.png' );

			$submenu[0]   = array( 'hook' => 'dashboard', 'page_title' => 'Connections : ' . __( 'Dashboard', 'connections' ), 'menu_title' => __( 'Dashboard', 'connections' ), 'capability' => 'connections_view_dashboard', 'menu_slug' => 'connections_dashboard', 'function' => array ( &$this, 'showPage' ) );
			$submenu[20]  = array( 'hook' => 'manage', 'page_title' => 'Connections : ' . __( 'Manage', 'connections' ), 'menu_title' => __( 'Manage', 'connections' ), 'capability' => 'connections_manage', 'menu_slug' => 'connections_manage', 'function' => array ( &$this, 'showPage' ) );
			$submenu[40]  = array( 'hook' => 'add', 'page_title' => 'Connections : ' . __( 'Add Entry', 'connections' ), 'menu_title' => __( 'Add Entry', 'connections' ), 'capability' => $addEntryCapability, 'menu_slug' => 'connections_add', 'function' => array ( &$this, 'showPage' ) );
			$submenu[60]  = array( 'hook' => 'categories', 'page_title' => 'Connections : ' . __( 'Categories', 'connections' ), 'menu_title' => __( 'Categories', 'connections' ), 'capability' => 'connections_edit_categories', 'menu_slug' => 'connections_categories', 'function' => array ( &$this, 'showPage' ) );
			$submenu[80]  = array( 'hook' => 'templates', 'page_title' => 'Connections : ' . __( 'Templates', 'connections' ), 'menu_title' => __( 'Templates', 'connections' ), 'capability' => 'connections_manage_template', 'menu_slug' => 'connections_templates', 'function' => array ( &$this, 'showPage' ) );
			$submenu[100] = array( 'hook' => 'settings', 'page_title' => 'Connections : ' . __( 'Settings', 'connections' ), 'menu_title' => __( 'Settings', 'connections' ), 'capability' => 'connections_change_settings', 'menu_slug' => 'connections_settings', 'function' => array ( &$this, 'showPage' ) );
			$submenu[120] = array( 'hook' => 'roles', 'page_title' => 'Connections : ' . __( 'Roles &amp; Capabilites', 'connections' ), 'menu_title' => __( 'Roles', 'connections' ), 'capability' => 'connections_change_roles', 'menu_slug' => 'connections_roles', 'function' => array ( &$this, 'showPage' ) );
			//$submenu[140] = array( 'hook' => 'help', 'page_title' => 'Connections : ' . __('Help', 'connections'), 'menu_title' => __('Help', 'connections'), 'capability' => 'connections_view_help', 'menu_slug' => 'connections_help', 'function' => array (&$this, 'showPage') );

			$submenu = apply_filters( 'cn_submenu', $submenu );

			ksort( $submenu );

			foreach ( $submenu as $menu ) {
				extract( $menu );
				$this->pageHook->{$hook} = add_submenu_page( 'connections_dashboard', $page_title, $menu_title, $capability, $menu_slug, $function );
			}

		}

		/**
		 * Register the metaboxes used for editing an entry.
		 *
		 * Action added in connectionsLoad::adminInit
		 *
		 * @access private
		 * @author Steven A. Zahm
		 * @since 0.7.1.3
		 * @uses add_filter()
		 * @uses current_filter()
		 * @return void
		 */
		public static function registerEditMetaboxes() {
			// The meta boxes do not need diplayed/registered if no action is being taken on an entry. Such as copy/edit.
			if ( $_GET['page'] === 'connections_manage' && ! isset( $_GET['action'] ) )  return;

			$form = new cnFormObjects();

			$form->registerEditMetaboxes( substr( current_filter(), 5 ) );

			add_filter( 'screen_layout_columns', array( __CLASS__, 'screenLayout' ), 10, 2 );
		}

		/**
		 * Register the metaboxes used for the Dashboard.
		 *
		 * Action added in connectionsLoad::adminInit
		 *
		 * @access private
		 * @author Steven A. Zahm
		 * @since 0.7.1.6
		 * @uses add_filter()
		 * @return void
		 */
		public static function registerDashboardMetaboxes() {
			$form = new cnFormObjects();
			$form->registerDashboardMetaboxes();

			add_filter( 'screen_layout_columns', array( __CLASS__, 'screenLayout' ), 10, 2 );
		}

		/**
		 * Register the number of columns permitted for metabox use on the edit entry page.
		 *
		 * Filter added in connectionsLoad::registerEditMetaboxes
		 *
		 * @access private
		 * @author Steven A. Zahm
		 * @since 0.7.1.3
		 * @param $columns (array)
		 * @param $sceen (string)
		 * @return array
		 */
		public static function screenLayout( $columns, $screen ) {
			global $connections;

			$columns[ $connections->pageHook->dashboard ] = 2;
			$columns[ $connections->pageHook->manage ] = 2;
			$columns[ $connections->pageHook->add ] = 2;

			return $columns;
		}

		/**
		 * Add the Settings link to the plugin admin page.
		 *
		 * @access private
		 * @since unknown
		 * @param (array) $links
		 * @return void
		 */
		public static function addActionLinks( $links ) {

			$new_links = array();

			$new_links[] = '<a href="admin.php?page=connections_settings">' . __( 'Settings', 'connections' ) . '</a>';

			return array_merge( $new_links, $links );
		}

		/**
		 * Add the links for premium templates, add-on plugins and support info.
		 *
		 * @access private
		 * @since unknown
		 * @param (array) $links
		 * @param (string) $file
		 * @return void
		 */
		public static function addMetaLinks( $links, $file ) {

			if ( $file == CN_BASE_NAME ) {
				$links[] = '<a href="http://connections-pro.com/?page_id=29" target="_blank">' . __( 'Add-on Plugins', 'connections' ) . '</a>';
				$links[] = '<a href="http://connections-pro.com/?page_id=419" target="_blank">' . __( 'Templates', 'connections' ) . '</a>';
				$links[] = '<a href="http://connections-pro.com/documentation/plugin/" target="_blank">' . __( 'Documentation', 'connections' ) . '</a>';
				$links[] = '<a href="http://connections-pro.com/support" target="_blank">' . __( 'Support Forums', 'connections' ) . '</a>';
			}

			return $links;
		}

		/**
		 * Add the changelog as a table row on the Manage Plugin admin screen.
		 * Code based on Changelogger.
		 *
		 * @access private
		 * @since unknown
		 * @uses get_option()
		 * @uses get_transient()
		 * @return (string)
		 */
		public static function displayUpgradeNotice() {
			include_once ABSPATH . 'wp-admin/includes/plugin-install.php';
			//echo "<tr><td colspan='5'>TEST</td></tr>";
			//$api = plugins_api('plugin_information', array('slug' => 'connections', 'fields' => array('tested' => true, 'requires' => false, 'rating' => false, 'downloaded' => false, 'downloadlink' => false, 'last_updated' => false, 'homepage' => false, 'tags' => false, 'sections' => true) ));
			//print_r($api);

			if ( version_compare( $GLOBALS['wp_version'], '2.9.999', '>' ) ) // returning bool if at least WP 3.0 is running
				$current = get_option( '_site_transient_update_plugins' );

			elseif ( version_compare( $GLOBALS['wp_version'], '2.7.999', '>' ) ) // returning bool if at least WP 2.8 is running
				$current = get_transient( 'update_plugins' );

			else
				$current = get_option( 'update_plugins' );

			//print_r($current);

			if ( !isset( $current->response[ CN_BASE_NAME ] ) ) return NULL;

			$r = $current->response[ CN_BASE_NAME ]; // response should contain the slug and upgrade_notice within an array.
			//print_r($r);

			if ( isset( $r->upgrade_notice ) ) {
				$columns = CLOSMINWP28 ? 3 : 5;

				$output .= '<tr class="plugin-update-tr"><td class="plugin-update" colspan="' . $columns . '"><div class="update-message" style="font-weight: normal;">';
				$output .= '<strong>Upgrade notice for version: ' . $r->new_version . '</strong>';
				$output .= '<ul style="list-style-type: square; margin-left:20px;"><li>' . $r->upgrade_notice . '</li></ul>';
				$output .= '</div></td></tr>';

				echo $output;
			}


			/*stdClass Object
			(
			    [id] => 5801
			    [slug] => connections
			    [new_version] => 0.7.0.0
			    [upgrade_notice] => Upgrading to this version might break custom templates.
			    [url] => http://wordpress.org/extend/plugins/connections/
			    [package] => http://downloads.wordpress.org/plugin/connections.0.7.0.0.zip
			)*/
		}

		/**
		 * This is the registered function calls for the Connections admin pages as registered
		 * using the add_menu_page() and add_submenu_page() WordPress functions.
		 *
		 * @since unknown
		 * @access private
		 * @return void
		 */
		public function showPage() {

			if ( $this->dbUpgrade ) {
				include_once dirname( __FILE__ ) . '/includes/inc.upgrade.php';
				connectionsShowUpgradePage();
				return;
			}

			switch ( $_GET['page'] ) {
				case 'connections_dashboard':
					include_once CN_PATH . '/submenus/dashboard.php';
					connectionsShowDashboardPage();
					break;

				case 'connections_manage':
					include_once CN_PATH . '/submenus/manage.php';
					( isset( $_GET['action'] ) && ! empty( $_GET['action'] ) ) ? $action = $_GET['action'] : $action = '';

					connectionsShowViewPage( $action );
					break;

				case 'connections_add':
					include_once CN_PATH . '/submenus/manage.php';

					connectionsShowViewPage( 'add' );
					break;

				case 'connections_categories':
					include_once CN_PATH . '/submenus/categories.php';
					connectionsShowCategoriesPage();
					break;

				case 'connections_settings':
					include_once CN_PATH . '/submenus/settings.php';
					connectionsShowSettingsPage();
					break;

				case 'connections_templates':
					include_once CN_PATH . '/submenus/templates.php';
					connectionsShowTemplatesPage();
					break;

				case 'connections_roles':
					include_once CN_PATH . '/submenus/roles.php';
					connectionsShowRolesPage();
					break;

				case 'connections_help':
					include_once CN_PATH . '/submenus/help.php';
					connectionsShowHelpPage();
					break;
			}

		}

		/**
		 * Verify and process requested actions in the admin.
		 *
		 * @since unknown
		 * @access private
		 * @return void
		 */
		public function adminActions( $wp ) {
			// Exit the method if $_GET['connections_process'] isn't set.
			if ( ! isset( $_GET['connections_process'] ) ) return;

			global $connections;

			include_once CN_PATH . '/includes/inc.processes.php';
			$form = new cnFormObjects();

			switch ( $_GET['process'] ) {
				case 'manage':
					if ( isset( $_GET['action'] ) && ! empty( $_GET['action'] ) ) {
						switch ( $_GET['action'] ) {
							case 'add':
								/*
								 * Check whether the current user can add an entry.
								 */
								if ( current_user_can( 'connections_add_entry' ) || current_user_can( 'connections_add_entry_moderated' ) ) {
									check_admin_referer( $form->getNonce( 'add_entry' ), '_cn_wpnonce' );

									// Setup the redirect URL.
									$redirect = isset( $_POST['redirect'] ) ? $_POST['redirect'] : 'admin.php?page=connections_add';

									processEntry( $_POST, 'add' );

									wp_redirect( get_admin_url( get_current_blog_id(), $redirect) );
									exit();
								} else {
									$connections->setErrorMessage( 'capability_add' );
								}
								break;

							case 'update':
								/*
								 * Check whether the current user can edit an entry.
								 */
								if ( current_user_can( 'connections_edit_entry' ) || current_user_can( 'connections_edit_entry_moderated' ) ) {
									check_admin_referer( $form->getNonce( 'update_entry' ), '_cn_wpnonce' );

									// Setup the redirect URL.
									$redirect = isset( $_POST['redirect'] ) ? $_POST['redirect'] : 'admin.php?page=connections_manage';

									processEntry( $_POST, 'update' );

									wp_redirect( get_admin_url( get_current_blog_id(), $redirect ) );
									exit();
								} else {
									$connections->setErrorMessage( 'capability_edit' );
								}
								break;

							case 'approve':
								/*
								 * Check whether the current user can edit an entry.
								 */
								if ( current_user_can( 'connections_edit_entry' ) ) {
									processSetEntryStatus( 'approved' );
									wp_redirect( get_admin_url( get_current_blog_id(), 'admin.php?page=connections_manage' ) );
									exit();
								} else {
									$connections->setErrorMessage( 'capability_edit' );
								}
								break;

							case 'unapprove':
								/*
								 * Check whether the current user can edit an entry.
								 */
								if ( current_user_can( 'connections_edit_entry' ) ) {
									processSetEntryStatus( 'pending' );
									wp_redirect( get_admin_url( get_current_blog_id(), 'admin.php?page=connections_manage' ) );
									exit();
								} else {
									$connections->setErrorMessage( 'capability_edit' );
								}
								break;

							case 'delete':
								/*
								 * Check whether the current user delete an entry.
								 */
								if ( current_user_can( 'connections_delete_entry' ) ) {
									processDeleteEntry();
									wp_redirect( get_admin_url( get_current_blog_id(), 'admin.php?page=connections_manage' ) );
									exit();
								} else {
									$connections->setErrorMessage( 'capability_delete' );
								}
								break;

							case 'filter':
								$queryArgs = array();

								check_admin_referer( 'filter' );
								processSetUserFilter();

								if ( isset( $_POST['s'] ) && ! empty( $_POST['s'] ) ) $queryArgs['s'] = urlencode( $_POST['s'] );
								if ( isset( $_GET['s'] ) && ! empty( $_GET['s'] ) ) $queryArgs['s'] = urlencode( $_GET['s'] );
								if ( isset( $_GET['cn-char'] ) && 0 < strlen( $_GET['cn-char'] ) ) $queryArgs['cn-char'] = urlencode( $_GET['cn-char'] );

								wp_redirect( get_admin_url( get_current_blog_id(), add_query_arg( $queryArgs, 'admin.php?page=connections_manage' ) ) );
								exit();
								break;

							case 'do':
								if ( isset( $_POST['action'] ) && ! empty( $_POST['action'] ) ) {
									switch ( $_POST['action'] ) {
										case 'delete':
											/*
											 * Check whether the current user delete an entry.
											 */
											if ( current_user_can( 'connections_delete_entry' ) ) {
												check_admin_referer( $form->getNonce( 'bulk_action' ), '_cn_wpnonce' );
												processDeleteEntries();
												wp_redirect( get_admin_url( get_current_blog_id(), add_query_arg( array( 's' => urlencode( $_POST['s'] ) ) , 'admin.php?page=connections_manage' ) ) );
												exit();
											} else {
												$connections->setErrorMessage( 'capability_delete' );
											}
											break;

										case 'approve':
											/*
											 * Check whether the current user delete an entry.
											 */
											if ( current_user_can( 'connections_edit_entry' ) ) {
												check_admin_referer( $form->getNonce( 'bulk_action' ), '_cn_wpnonce' );
												processSetEntryStatuses( 'approved' );
												wp_redirect( get_admin_url( get_current_blog_id(), add_query_arg( array( 's' => urlencode( $_POST['s'] ) ) , 'admin.php?page=connections_manage' ) ) );
												exit();
											} else {
												$connections->setErrorMessage( 'capability_edit' );
											}
											break;

										case 'unapprove':
											/*
											 * Check whether the current user delete an entry.
											 */
											if ( current_user_can( 'connections_edit_entry' ) ) {
												check_admin_referer( $form->getNonce( 'bulk_action' ), '_cn_wpnonce' );
												processSetEntryStatuses( 'pending' );
												wp_redirect( get_admin_url( get_current_blog_id(), add_query_arg( array( 's' => urlencode( $_POST['s'] ) ) , 'admin.php?page=connections_manage' ) ) );
												exit();
											} else {
												$connections->setErrorMessage( 'capability_edit' );
											}
											break;

										case 'public' || 'private' || 'unlisted':
											/*
											 * Check whether the current user can edit entries.
											 */
											if ( current_user_can( 'connections_edit_entry' ) ) {
												check_admin_referer( $form->getNonce( 'bulk_action' ), '_cn_wpnonce' );
												processSetEntryVisibility();
												wp_redirect( get_admin_url( get_current_blog_id(), add_query_arg( array( 's' => urlencode( $_POST['s'] ) ) , 'admin.php?page=connections_manage' ) ) );
												exit();
											} else {
												$connections->setErrorMessage( 'capability_edit' );
											}
											break;

										default:

											if ( isset( $_POST['s'] ) && ! empty( $_POST['s'] ) ) $queryArgs['s'] = urlencode( $_POST['s'] );
											if ( isset( $_POST['cn-char'] ) && 0 < strlen( $_POST['cn-char'] ) ) $queryArgs['cn-char'] = urlencode( $_POST['cn-char'] );

											wp_redirect( get_admin_url( get_current_blog_id(), add_query_arg( $queryArgs , 'admin.php?page=connections_manage' ) ) );
											exit();
											break;
									}
								}

								$queryArgs = array();

								check_admin_referer( $form->getNonce( 'bulk_action' ), '_cn_wpnonce' );
								processSetUserFilter();

								if ( isset( $_POST['s'] ) && ! empty( $_POST['s'] ) ) $queryArgs['s'] = urlencode( $_POST['s'] );
								if ( isset( $_POST['cn-char'] ) && 0 < strlen( $_POST['cn-char'] ) ) $queryArgs['cn-char'] = urlencode( $_POST['cn-char'] );

								wp_redirect( get_admin_url( get_current_blog_id(), add_query_arg( $queryArgs, 'admin.php?page=connections_manage' ) ) );
								exit();
								break;
						}
					}

					break;

				case 'category':
					/*
					 * Check whether user can edit Settings
					 */
					if ( current_user_can( 'connections_edit_categories' ) ) {
						if ( $_GET['action'] ) {
							switch ( $_GET['action'] ) {
								case 'add':
									check_admin_referer( $form->getNonce( 'add_category' ), '_cn_wpnonce' );
									processAddCategory();
									wp_redirect( get_admin_url( get_current_blog_id(), 'admin.php?page=connections_categories' ) );
									exit();
									break;

								case 'update':
									check_admin_referer( $form->getNonce( 'update_category' ), '_cn_wpnonce' );
									processUpdateCategory();
									wp_redirect( get_admin_url( get_current_blog_id(), 'admin.php?page=connections_categories' ) );
									exit();
									break;

								case 'delete':
									processDeleteCategory( 'delete' );
									wp_redirect( get_admin_url( get_current_blog_id(), 'admin.php?page=connections_categories' ) );
									exit();
									break;

								case 'bulk_delete':
									check_admin_referer( $form->getNonce( 'bulk_delete_category' ), '_cn_wpnonce' );
									processDeleteCategory( 'bulk_delete' );
									wp_redirect( get_admin_url( get_current_blog_id(), 'admin.php?page=connections_categories' ) );
									exit();
									break;
							}
						}
					}
					else {
						$connections->setErrorMessage( 'capability_categories' );
					}
					break;

				case 'template':
					/*
					 * Check whether user can manage Templates
					 */
					if ( current_user_can( 'connections_manage_template' ) ) {
						if ( $_GET['action'] ) {
							switch ( $_GET['action'] ) {
								case 'activate':
									processActivateTemplate();

									( ! isset( $_GET['type'] ) ) ? $tab = 'all' : $tab = esc_attr( $_GET['type'] );
									wp_redirect( get_admin_url( get_current_blog_id(), add_query_arg( array( 'type' => $tab ) , 'admin.php?page=connections_templates' ) ) );
									exit();
									break;

								case 'install':
									check_admin_referer( $form->getNonce( 'install_template' ), '_cn_wpnonce' );
									processInstallTemplate();

									( ! isset( $_GET['type'] ) ) ? $tab = 'all' : $tab = esc_attr( $_GET['type'] );
									wp_redirect( get_admin_url( get_current_blog_id(), add_query_arg( array( 'type' => $tab ) , 'admin.php?page=connections_templates' ) ) );
									exit();
									break;

								case 'delete':
									processDeleteTemplate();

									( ! isset( $_GET['type'] ) ) ? $tab = 'all' : $tab = esc_attr( $_GET['type'] );
									wp_redirect( get_admin_url( get_current_blog_id(), add_query_arg( array( 'type' => $tab ) , 'admin.php?page=connections_templates' ) ) );
									exit();
									break;
							}
						}
					} else {
						// @TODO: Create template specific error message.
						$connections->setErrorMessage( 'capability_settings' );
					}

					break;

			}
		}

		/**
		 * This action will handle frontend process requests, currently only creating the vCard for download.
		 *
		 * @TODO If no vcard is found should redirect to an error message.
		 * @access private
		 * @since 0.7.3
		 * @return void
		 */
		public function frontendActions() {
			global $connections;
			$process = get_query_var( 'cn-process' );
			$token = get_query_var( 'cn-token' );
			$id = (integer) get_query_var( 'cn-id' );

			if ( $process === 'vcard' ) {
				$slug = get_query_var( 'cn-entry-slug' ); //var_dump($slug);

				/*
				 * If the token and id values were set, the link was likely from the admin.
				 * Check for those values and validate the token. The primary reason for this
				 * to be able to download vCards of entries that are set to "Unlisted".
				 */
				if ( ! empty( $id ) && ! empty( $token ) ) {
					if ( ! wp_verify_nonce( $token, 'download_vcard_' . $id ) ) wp_die( 'Invalid vCard Token' );

					$entry = $connections->retrieve->entry( $id );

					// Die if no entry was found.
					if ( empty( $entry ) ) wp_die( __( 'vCard not available for download.', 'connections' ) );

					$vCard = new cnvCard( $entry ); //var_dump($vCard);die;
				}
				else {
					$entry = $connections->retrieve->entries( array( 'slug' => $slug ) ); //var_dump($entry);die;

					// Die if no entry was found.
					if ( empty( $entry ) ) wp_die( __( 'vCard not available for download.', 'connections' ) );

					$vCard = new cnvCard( $entry[0] ); //var_dump($vCard);die;
				}


				$filename = sanitize_file_name( $vCard->getName() ); //var_dump($filename);
				$data = $vCard->getvCard(); //var_dump($data);die;


				header( 'Content-Type: text/x-vcard; charset=utf-8' );
				header( 'Content-Disposition: attachment; filename=' . $filename . '.vcf' );
				header( 'Content-Length: ' . strlen( $data ) );
				header( 'Pragma: public' );
				header( "Pragma: no-cache" );
				header( "Expires: 0" );
				header( 'Connection: close' );

				echo $data;
				exit;
			}
		}
	}

	global $connections;
	$connections = new connectionsLoad();

}